/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.11 Thu Oct 31 02:28:20 2024.
 */

#ifndef INVERTER_DBC_H
#define INVERTER_DBC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define INVERTER_DBC_RL_AMK_ACTUAL_1_FRAME_ID (0x283u)
#define INVERTER_DBC_RL_AMK_ACTUAL_2_FRAME_ID (0x287u)
#define INVERTER_DBC_RL_AMK_RIT_SET1_FRAME_ID (0x291u)
#define INVERTER_DBC_RL_AMK_RIT_SET2_FRAME_ID (0x295u)
#define INVERTER_DBC_RL_AMK_SETPOINTS_FRAME_ID (0x184u)
#define INVERTER_DBC_RL_AMK_SETPOINTS2_FRAME_ID (0x188u)
#define INVERTER_DBC_RR_AMK_ACTUAL_1_FRAME_ID (0x284u)
#define INVERTER_DBC_RR_AMK_ACTUAL_2_FRAME_ID (0x288u)
#define INVERTER_DBC_RR_AMK_RIT_SET1_FRAME_ID (0x292u)
#define INVERTER_DBC_RR_AMK_RIT_SET2_FRAME_ID (0x296u)
#define INVERTER_DBC_RR_AMK_SETPOINTS_FRAME_ID (0x185u)
#define INVERTER_DBC_RR_AMK_SETPOINTS2_FRAME_ID (0x189u)
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FRAME_ID (0x285u)
#define INVERTER_DBC_FL_AMK_ACTUAL_2_FRAME_ID (0x289u)
#define INVERTER_DBC_FL_AMK_RIT_SET1_FRAME_ID (0x293u)
#define INVERTER_DBC_FL_AMK_RIT_SET2_FRAME_ID (0x297u)
#define INVERTER_DBC_FL_AMK_SETPOINTS_FRAME_ID (0x186u)
#define INVERTER_DBC_FL_AMK_SETPOINTS2_FRAME_ID (0x190u)
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FRAME_ID (0x286u)
#define INVERTER_DBC_FR_AMK_ACTUAL_2_FRAME_ID (0x290u)
#define INVERTER_DBC_FR_AMK_RIT_SET1_FRAME_ID (0x294u)
#define INVERTER_DBC_FR_AMK_RIT_SET2_FRAME_ID (0x298u)
#define INVERTER_DBC_FR_AMK_SETPOINTS_FRAME_ID (0x187u)
#define INVERTER_DBC_FR_AMK_SETPOINTS2_FRAME_ID (0x191u)

/* Frame lengths in bytes. */
#define INVERTER_DBC_RL_AMK_ACTUAL_1_LENGTH (8u)
#define INVERTER_DBC_RL_AMK_ACTUAL_2_LENGTH (8u)
#define INVERTER_DBC_RL_AMK_RIT_SET1_LENGTH (8u)
#define INVERTER_DBC_RL_AMK_RIT_SET2_LENGTH (8u)
#define INVERTER_DBC_RL_AMK_SETPOINTS_LENGTH (8u)
#define INVERTER_DBC_RL_AMK_SETPOINTS2_LENGTH (2u)
#define INVERTER_DBC_RR_AMK_ACTUAL_1_LENGTH (8u)
#define INVERTER_DBC_RR_AMK_ACTUAL_2_LENGTH (8u)
#define INVERTER_DBC_RR_AMK_RIT_SET1_LENGTH (8u)
#define INVERTER_DBC_RR_AMK_RIT_SET2_LENGTH (8u)
#define INVERTER_DBC_RR_AMK_SETPOINTS_LENGTH (8u)
#define INVERTER_DBC_RR_AMK_SETPOINTS2_LENGTH (2u)
#define INVERTER_DBC_FL_AMK_ACTUAL_1_LENGTH (8u)
#define INVERTER_DBC_FL_AMK_ACTUAL_2_LENGTH (8u)
#define INVERTER_DBC_FL_AMK_RIT_SET1_LENGTH (8u)
#define INVERTER_DBC_FL_AMK_RIT_SET2_LENGTH (8u)
#define INVERTER_DBC_FL_AMK_SETPOINTS_LENGTH (8u)
#define INVERTER_DBC_FL_AMK_SETPOINTS2_LENGTH (2u)
#define INVERTER_DBC_FR_AMK_ACTUAL_1_LENGTH (8u)
#define INVERTER_DBC_FR_AMK_ACTUAL_2_LENGTH (8u)
#define INVERTER_DBC_FR_AMK_RIT_SET1_LENGTH (8u)
#define INVERTER_DBC_FR_AMK_RIT_SET2_LENGTH (8u)
#define INVERTER_DBC_FR_AMK_SETPOINTS_LENGTH (8u)
#define INVERTER_DBC_FR_AMK_SETPOINTS2_LENGTH (2u)

/* Extended or standard frame types. */
#define INVERTER_DBC_RL_AMK_ACTUAL_1_IS_EXTENDED (0)
#define INVERTER_DBC_RL_AMK_ACTUAL_2_IS_EXTENDED (0)
#define INVERTER_DBC_RL_AMK_RIT_SET1_IS_EXTENDED (0)
#define INVERTER_DBC_RL_AMK_RIT_SET2_IS_EXTENDED (0)
#define INVERTER_DBC_RL_AMK_SETPOINTS_IS_EXTENDED (0)
#define INVERTER_DBC_RL_AMK_SETPOINTS2_IS_EXTENDED (0)
#define INVERTER_DBC_RR_AMK_ACTUAL_1_IS_EXTENDED (0)
#define INVERTER_DBC_RR_AMK_ACTUAL_2_IS_EXTENDED (0)
#define INVERTER_DBC_RR_AMK_RIT_SET1_IS_EXTENDED (0)
#define INVERTER_DBC_RR_AMK_RIT_SET2_IS_EXTENDED (0)
#define INVERTER_DBC_RR_AMK_SETPOINTS_IS_EXTENDED (0)
#define INVERTER_DBC_RR_AMK_SETPOINTS2_IS_EXTENDED (0)
#define INVERTER_DBC_FL_AMK_ACTUAL_1_IS_EXTENDED (0)
#define INVERTER_DBC_FL_AMK_ACTUAL_2_IS_EXTENDED (0)
#define INVERTER_DBC_FL_AMK_RIT_SET1_IS_EXTENDED (0)
#define INVERTER_DBC_FL_AMK_RIT_SET2_IS_EXTENDED (0)
#define INVERTER_DBC_FL_AMK_SETPOINTS_IS_EXTENDED (0)
#define INVERTER_DBC_FL_AMK_SETPOINTS2_IS_EXTENDED (0)
#define INVERTER_DBC_FR_AMK_ACTUAL_1_IS_EXTENDED (0)
#define INVERTER_DBC_FR_AMK_ACTUAL_2_IS_EXTENDED (0)
#define INVERTER_DBC_FR_AMK_RIT_SET1_IS_EXTENDED (0)
#define INVERTER_DBC_FR_AMK_RIT_SET2_IS_EXTENDED (0)
#define INVERTER_DBC_FR_AMK_SETPOINTS_IS_EXTENDED (0)
#define INVERTER_DBC_FR_AMK_SETPOINTS2_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define INVERTER_DBC_RL_AMK_ACTUAL_1_NAME "RL_AMK_Actual_1"
#define INVERTER_DBC_RL_AMK_ACTUAL_2_NAME "RL_AMK_Actual_2"
#define INVERTER_DBC_RL_AMK_RIT_SET1_NAME "RL_AMK_RITSet1"
#define INVERTER_DBC_RL_AMK_RIT_SET2_NAME "RL_AMK_RITSet2"
#define INVERTER_DBC_RL_AMK_SETPOINTS_NAME "RL_AMK_Setpoints"
#define INVERTER_DBC_RL_AMK_SETPOINTS2_NAME "RL_AMK_Setpoints2"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_NAME "RR_AMK_Actual_1"
#define INVERTER_DBC_RR_AMK_ACTUAL_2_NAME "RR_AMK_Actual_2"
#define INVERTER_DBC_RR_AMK_RIT_SET1_NAME "RR_AMK_RITSet1"
#define INVERTER_DBC_RR_AMK_RIT_SET2_NAME "RR_AMK_RITSet2"
#define INVERTER_DBC_RR_AMK_SETPOINTS_NAME "RR_AMK_Setpoints"
#define INVERTER_DBC_RR_AMK_SETPOINTS2_NAME "RR_AMK_Setpoints2"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_NAME "FL_AMK_Actual_1"
#define INVERTER_DBC_FL_AMK_ACTUAL_2_NAME "FL_AMK_Actual_2"
#define INVERTER_DBC_FL_AMK_RIT_SET1_NAME "FL_AMK_RITSet1"
#define INVERTER_DBC_FL_AMK_RIT_SET2_NAME "FL_AMK_RITSet2"
#define INVERTER_DBC_FL_AMK_SETPOINTS_NAME "FL_AMK_Setpoints"
#define INVERTER_DBC_FL_AMK_SETPOINTS2_NAME "FL_AMK_Setpoints2"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_NAME "FR_AMK_Actual_1"
#define INVERTER_DBC_FR_AMK_ACTUAL_2_NAME "FR_AMK_Actual_2"
#define INVERTER_DBC_FR_AMK_RIT_SET1_NAME "FR_AMK_RITSet1"
#define INVERTER_DBC_FR_AMK_RIT_SET2_NAME "FR_AMK_RITSet2"
#define INVERTER_DBC_FR_AMK_SETPOINTS_NAME "FR_AMK_Setpoints"
#define INVERTER_DBC_FR_AMK_SETPOINTS2_NAME "FR_AMK_Setpoints2"

/* Signal Names. */
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_STATUS_SYSTEM_READY_NAME "RL_Status_SystemReady"
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_STATUS_ERROR_NAME "RL_Status_Error"
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_STATUS_WARN_NAME "RL_Status_Warn"
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_STATUS_QUIT_DC_ON_NAME "RL_Status_QuitDcOn"
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_STATUS_DC_ON_NAME "RL_Status_DcOn"
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_STATUS_QUIT_INVERTER_ON_NAME "RL_Status_QuitInverterOn"
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_STATUS_INVERTER_ON_NAME "RL_Status_InverterOn"
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_STATUS_DERATING_NAME "RL_Status_Derating"
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_FEEDBACK_VELOCITY_NAME "RL_FeedbackVelocity"
#define INVERTER_DBC_RL_AMK_ACTUAL_1_RL_MAGNETIZING_CURRENT_NAME "RL_MagnetizingCurrent"
#define INVERTER_DBC_RL_AMK_ACTUAL_2_RL_TEMP_MOTOR_NAME "RL_TempMotor"
#define INVERTER_DBC_RL_AMK_ACTUAL_2_RL_TEMP_INVERTER_NAME "RL_TempInverter"
#define INVERTER_DBC_RL_AMK_ACTUAL_2_RL_ERROR_INFO_NAME "RL_ErrorInfo"
#define INVERTER_DBC_RL_AMK_ACTUAL_2_RL_TEMP_IGBT_NAME "RL_TempIGBT"
#define INVERTER_DBC_RL_AMK_RIT_SET1_RL_ERRO_R_LIST1_NAME "RL_ErroRList1"
#define INVERTER_DBC_RL_AMK_RIT_SET1_RL_ERRO_R_LIST2_NAME "RL_ErroRList2"
#define INVERTER_DBC_RL_AMK_RIT_SET2_RL_ERROR_LIST3_NAME "RL_ErrorList3"
#define INVERTER_DBC_RL_AMK_RIT_SET2_RL_DC_BUS_VOLTAGE_NAME "RL_DCBusVoltage"
#define INVERTER_DBC_RL_AMK_RIT_SET2_RL_DC_BUS_VOLTAGE_MONITORING_NAME "RL_DCBusVoltageMonitoring"
#define INVERTER_DBC_RL_AMK_SETPOINTS_RL_AMK_B_INVERTER_ON_NAME "RL_AMK_bInverterOn"
#define INVERTER_DBC_RL_AMK_SETPOINTS_RL_AMK_B_DC_ON_NAME "RL_AMK_bDCOn"
#define INVERTER_DBC_RL_AMK_SETPOINTS_RL_AMK_B_ENABLE_NAME "RL_AMK_bEnable"
#define INVERTER_DBC_RL_AMK_SETPOINTS_RL_AMK_B_ERROR_RESET_NAME "RL_AMK_bErrorReset"
#define INVERTER_DBC_RL_AMK_SETPOINTS_RL_AMK_TORQUE_SETPOINT_NAME "RL_AMK_TorqueSetpoint"
#define INVERTER_DBC_RL_AMK_SETPOINTS_RL_AMK_TORQUE_LIMIT_POSITIVE_NAME "RL_AMK_TorqueLimitPositive"
#define INVERTER_DBC_RL_AMK_SETPOINTS_RL_AMK_TORQUE_LIMIT_NEGATIVE_NAME "RL_AMK_TorqueLimitNegative"
#define INVERTER_DBC_RL_AMK_SETPOINTS2_RL_ACTUAL_SPEED_NAME "RL_ActualSpeed"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_STATUS_SYSTEM_READY_NAME "RR_Status_SystemReady"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_STATUS_ERROR_NAME "RR_Status_Error"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_STATUS_WARN_NAME "RR_Status_Warn"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_STATUS_QUIT_DC_ON_NAME "RR_Status_QuitDcOn"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_STATUS_DC_ON_NAME "RR_Status_DcOn"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_STATUS_QUIT_INVERTER_ON_NAME "RR_Status_QuitInverterOn"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_STATUS_INVERTER_ON_NAME "RR_Status_InverterOn"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_STATUS_DERATING_NAME "RR_Status_Derating"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_FEEDBACK_VELOCITY_NAME "RR_FeedbackVelocity"
#define INVERTER_DBC_RR_AMK_ACTUAL_1_RR_MAGNETIZING_CURRENT_NAME "RR_MagnetizingCurrent"
#define INVERTER_DBC_RR_AMK_ACTUAL_2_RR_TEMP_MOTOR_NAME "RR_TempMotor"
#define INVERTER_DBC_RR_AMK_ACTUAL_2_RR_TEMP_INVERTER_NAME "RR_TempInverter"
#define INVERTER_DBC_RR_AMK_ACTUAL_2_RR_ERROR_INFO_NAME "RR_ErrorInfo"
#define INVERTER_DBC_RR_AMK_ACTUAL_2_RR_TEMP_IGBT_NAME "RR_TempIGBT"
#define INVERTER_DBC_RR_AMK_RIT_SET1_RR_ERRORLIST1_NAME "RR_Errorlist1"
#define INVERTER_DBC_RR_AMK_RIT_SET1_RR_ERRORLIST2_NAME "RR_Errorlist2"
#define INVERTER_DBC_RR_AMK_RIT_SET2_RR_ERRORLIST3_NAME "RR_Errorlist3"
#define INVERTER_DBC_RR_AMK_RIT_SET2_RR_DC_BUS_VOLTAGE_NAME "RR_DCBusVoltage"
#define INVERTER_DBC_RR_AMK_RIT_SET2_RR_DC_BUS_VOLTAGE_MONITORING_NAME "RR_DCBusVoltageMonitoring"
#define INVERTER_DBC_RR_AMK_SETPOINTS_RR_AMK_B_INVERTER_ON_NAME "RR_AMK_bInverterOn"
#define INVERTER_DBC_RR_AMK_SETPOINTS_RR_AMK_B_DC_ON_NAME "RR_AMK_bDCOn"
#define INVERTER_DBC_RR_AMK_SETPOINTS_RR_AMK_B_ENABLE_NAME "RR_AMK_bEnable"
#define INVERTER_DBC_RR_AMK_SETPOINTS_RR_AMK_B_ERROR_RESET_NAME "RR_AMK_bErrorReset"
#define INVERTER_DBC_RR_AMK_SETPOINTS_RR_AMK_TORQUE_SETPOINT_NAME "RR_AMK_TorqueSetpoint"
#define INVERTER_DBC_RR_AMK_SETPOINTS_RR_AMK_TORQUE_LIMIT_POSITIVE_NAME "RR_AMK_TorqueLimitPositive"
#define INVERTER_DBC_RR_AMK_SETPOINTS_RR_AMK_TORQUE_LIMIT_NEGATIVE_NAME "RR_AMK_TorqueLimitNegative"
#define INVERTER_DBC_RR_AMK_SETPOINTS2_RR_ACTUAL_SPEED_NAME "RR_ActualSpeed"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_STATUS_SYSTEM_READY_NAME "FL_Status_SystemReady"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_STATUS_ERROR_NAME "FL_Status_Error"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_STATUS_WARN_NAME "FL_Status_Warn"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_STATUS_QUIT_DC_ON_NAME "FL_Status_QuitDcOn"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_STATUS_DC_ON_NAME "FL_Status_DcOn"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_STATUS_QUIT_INVERTER_ON_NAME "FL_Status_QuitInverterOn"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_STATUS_INVERTER_ON_NAME "FL_Status_InverterOn"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_STATUS_DERATING_NAME "FL_Status_Derating"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_FEEDBACK_VELOCITY_NAME "FL_FeedbackVelocity"
#define INVERTER_DBC_FL_AMK_ACTUAL_1_FL_MAGNETIZING_CURRENT_NAME "FL_MagnetizingCurrent"
#define INVERTER_DBC_FL_AMK_ACTUAL_2_FL_TEMP_MOTOR_NAME "FL_TempMotor"
#define INVERTER_DBC_FL_AMK_ACTUAL_2_FL_TEMP_INVERTER_NAME "FL_TempInverter"
#define INVERTER_DBC_FL_AMK_ACTUAL_2_FL_ERROR_INFO_NAME "FL_ErrorInfo"
#define INVERTER_DBC_FL_AMK_ACTUAL_2_FL_TEMP_IGBT_NAME "FL_TempIGBT"
#define INVERTER_DBC_FL_AMK_RIT_SET1_FL_ERRORLIST1_NAME "FL_Errorlist1"
#define INVERTER_DBC_FL_AMK_RIT_SET1_FL_ERRORLIST2_NAME "FL_Errorlist2"
#define INVERTER_DBC_FL_AMK_RIT_SET2_FL_ERROR_LIST3_NAME "FL_ErrorList3"
#define INVERTER_DBC_FL_AMK_RIT_SET2_FL_DC_BUS_VOLTAGE_NAME "FL_DCBusVoltage"
#define INVERTER_DBC_FL_AMK_RIT_SET2_FL_DC_BUS_VOLTAGE_MONITORING_NAME "FL_DCBusVoltageMonitoring"
#define INVERTER_DBC_FL_AMK_SETPOINTS_FL_AMK_B_INVERTER_ON_NAME "FL_AMK_bInverterOn"
#define INVERTER_DBC_FL_AMK_SETPOINTS_FL_AMK_B_DC_ON_NAME "FL_AMK_bDCOn"
#define INVERTER_DBC_FL_AMK_SETPOINTS_FL_AMK_B_ENABLE_NAME "FL_AMK_bEnable"
#define INVERTER_DBC_FL_AMK_SETPOINTS_FL_AMK_B_ERROR_RESET_NAME "FL_AMK_bErrorReset"
#define INVERTER_DBC_FL_AMK_SETPOINTS_FL_AMK_TORQUE_SETPOINT_NAME "FL_AMK_TorqueSetpoint"
#define INVERTER_DBC_FL_AMK_SETPOINTS_FL_AMK_TORQUE_LIMIT_POSITIVE_NAME "FL_AMK_TorqueLimitPositive"
#define INVERTER_DBC_FL_AMK_SETPOINTS_FL_AMK_TORQUE_LIMIT_NEGATIVE_NAME "FL_AMK_TorqueLimitNegative"
#define INVERTER_DBC_FL_AMK_SETPOINTS2_FL_ACTUAL_SPEED_NAME "FL_ActualSpeed"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_STATUS_SYSTEM_READY_NAME "FR_Status_SystemReady"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_STATUS_ERROR_NAME "FR_Status_Error"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_STATUS_WARN_NAME "FR_Status_Warn"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_STATUS_QUIT_DC_ON_NAME "FR_Status_QuitDcOn"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_STATUS_DC_ON_NAME "FR_Status_DcOn"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_STATUS_QUIT_INVERTER_ON_NAME "FR_Status_QuitInverterOn"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_STATUS_INVERTER_ON_NAME "FR_Status_InverterOn"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_STATUS_DERATING_NAME "FR_Status_Derating"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_FEEDBACK_VELOCITY_NAME "FR_FeedbackVelocity"
#define INVERTER_DBC_FR_AMK_ACTUAL_1_FR_MAGNETIZING_CURRENT_NAME "FR_MagnetizingCurrent"
#define INVERTER_DBC_FR_AMK_ACTUAL_2_FR_TEMP_MOTOR_NAME "FR_TempMotor"
#define INVERTER_DBC_FR_AMK_ACTUAL_2_FR_TEMP_INVERTER_NAME "FR_TempInverter"
#define INVERTER_DBC_FR_AMK_ACTUAL_2_FR_ERROR_INFO_NAME "FR_ErrorInfo"
#define INVERTER_DBC_FR_AMK_ACTUAL_2_FR_TEMP_IGBT_NAME "FR_TempIGBT"
#define INVERTER_DBC_FR_AMK_RIT_SET1_FR_ERRORLIST1_NAME "FR_Errorlist1"
#define INVERTER_DBC_FR_AMK_RIT_SET1_FR_ERRORLIST2_NAME "FR_Errorlist2"
#define INVERTER_DBC_FR_AMK_RIT_SET2_FR_ERRORLIST3_NAME "FR_Errorlist3"
#define INVERTER_DBC_FR_AMK_RIT_SET2_FR_DC_BUS_VOLTAGE_NAME "FR_DCBusVoltage"
#define INVERTER_DBC_FR_AMK_RIT_SET2_FR_DC_BUS_VOLTAGE_MONITORING_NAME "FR_DCBusVoltageMonitoring"
#define INVERTER_DBC_FR_AMK_SETPOINTS_FR_AMK_B_INVERTER_ON_NAME "FR_AMK_bInverterOn"
#define INVERTER_DBC_FR_AMK_SETPOINTS_FR_AMK_B_DC_ON_NAME "FR_AMK_bDCOn"
#define INVERTER_DBC_FR_AMK_SETPOINTS_FR_AMK_B_ENABLE_NAME "FR_AMK_bEnable"
#define INVERTER_DBC_FR_AMK_SETPOINTS_FR_AMK_B_ERROR_RESET_NAME "FR_AMK_bErrorReset"
#define INVERTER_DBC_FR_AMK_SETPOINTS_FR_AMK_TORQUE_SETPOINT_NAME "FR_AMK_TorqueSetpoint"
#define INVERTER_DBC_FR_AMK_SETPOINTS_FR_AMK_TORQUE_LIMIT_POSITIVE_NAME "FR_AMK_TorqueLimitPositive"
#define INVERTER_DBC_FR_AMK_SETPOINTS_FR_AMK_TORQUE_LIMIT_NEGATIVE_NAME "FR_AMK_TorqueLimitNegative"
#define INVERTER_DBC_FR_AMK_SETPOINTS2_FR_ACTUAL_SPEED_NAME "FR_ActualSpeed"

/**
 * Signals in message RL_AMK_Actual_1.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rl_amk_actual_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_status_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_status_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_status_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_status_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_status_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_status_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_status_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_status_derating;

    /**
     * Range: -1000000000..1000000000 (-100000.0..100000.0 rpm)
     * Scale: 0.0001
     * Offset: 0
     */
    int32_t rl_feedback_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t rl_magnetizing_current;
};

/**
 * Signals in message RL_AMK_Actual_2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rl_amk_actual_2_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rl_temp_motor;

    /**
     * Range: -327680..327670 (-32768..32767 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rl_temp_inverter;

    /**
     * Range: -3277..3277 (-3276.8..3276.7 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rl_error_info;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rl_temp_igbt;
};

/**
 * Signals in message RL_AMK_RITSet1.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rl_amk_rit_set1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t rl_erro_r_list1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t rl_erro_r_list2;
};

/**
 * Signals in message RL_AMK_RITSet2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rl_amk_rit_set2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t rl_error_list3;

    /**
     * Range: 0..4096 (0..4096 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rl_dc_bus_voltage;

    /**
     * Range: 0..40960 (0..4096 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t rl_dc_bus_voltage_monitoring;
};

/**
 * Signals in message RL_AMK_Setpoints.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rl_amk_setpoints_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_amk_b_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_amk_b_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_amk_b_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_amk_b_error_reset;

    /**
     * Range: -10000..10000 (-1000..1000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rl_amk_torque_setpoint;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rl_amk_torque_limit_positive;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rl_amk_torque_limit_negative;
};

/**
 * Signals in message RL_AMK_Setpoints2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rl_amk_setpoints2_t {
    /**
     * Range: -1000..1000 (-1000..1000 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t rl_actual_speed;
};

/**
 * Signals in message RR_AMK_Actual_1.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rr_amk_actual_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_status_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_status_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_status_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_status_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_status_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_status_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_status_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_status_derating;

    /**
     * Range: -1000000000..1000000000 (-100000.0..100000.0 rpm)
     * Scale: 0.0001
     * Offset: 0
     */
    int32_t rr_feedback_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t rr_magnetizing_current;
};

/**
 * Signals in message RR_AMK_Actual_2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rr_amk_actual_2_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rr_temp_motor;

    /**
     * Range: -327680..327670 (-32768..32767 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rr_temp_inverter;

    /**
     * Range: -3277..3277 (-3276.8..3276.7 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rr_error_info;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rr_temp_igbt;
};

/**
 * Signals in message RR_AMK_RITSet1.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rr_amk_rit_set1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t rr_errorlist1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t rr_errorlist2;
};

/**
 * Signals in message RR_AMK_RITSet2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rr_amk_rit_set2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t rr_errorlist3;

    /**
     * Range: 0..4096 (0..4096 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rr_dc_bus_voltage;

    /**
     * Range: 0..40960 (0..4096 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t rr_dc_bus_voltage_monitoring;
};

/**
 * Signals in message RR_AMK_Setpoints.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rr_amk_setpoints_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_amk_b_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_amk_b_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_amk_b_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_amk_b_error_reset;

    /**
     * Range: -10000..10000 (-1000..1000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rr_amk_torque_setpoint;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rr_amk_torque_limit_positive;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rr_amk_torque_limit_negative;
};

/**
 * Signals in message RR_AMK_Setpoints2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_rr_amk_setpoints2_t {
    /**
     * Range: -1000..1000 (-1000..1000 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t rr_actual_speed;
};

/**
 * Signals in message FL_AMK_Actual_1.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fl_amk_actual_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_status_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_status_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_status_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_status_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_status_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_status_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_status_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_status_derating;

    /**
     * Range: -1000000000..1000000000 (-100000.0..100000.0 rpm)
     * Scale: 0.0001
     * Offset: 0
     */
    int32_t fl_feedback_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t fl_magnetizing_current;
};

/**
 * Signals in message FL_AMK_Actual_2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fl_amk_actual_2_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fl_temp_motor;

    /**
     * Range: -327680..327670 (-32768..32767 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fl_temp_inverter;

    /**
     * Range: -3277..3277 (-3276.8..3276.7 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fl_error_info;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fl_temp_igbt;
};

/**
 * Signals in message FL_AMK_RITSet1.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fl_amk_rit_set1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fl_errorlist1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fl_errorlist2;
};

/**
 * Signals in message FL_AMK_RITSet2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fl_amk_rit_set2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fl_error_list3;

    /**
     * Range: 0..4096 (0..4096 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fl_dc_bus_voltage;

    /**
     * Range: 0..40960 (0..4096 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fl_dc_bus_voltage_monitoring;
};

/**
 * Signals in message FL_AMK_Setpoints.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fl_amk_setpoints_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_amk_b_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_amk_b_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_amk_b_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_amk_b_error_reset;

    /**
     * Range: -10000..10000 (-1000..1000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fl_amk_torque_setpoint;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fl_amk_torque_limit_positive;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fl_amk_torque_limit_negative;
};

/**
 * Signals in message FL_AMK_Setpoints2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fl_amk_setpoints2_t {
    /**
     * Range: -1000..1000 (-1000..1000 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t fl_actual_speed;
};

/**
 * Signals in message FR_AMK_Actual_1.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fr_amk_actual_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_status_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_status_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_status_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_status_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_status_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_status_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_status_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_status_derating;

    /**
     * Range: -1000000000..1000000000 (-100000.0..100000.0 rpm)
     * Scale: 0.0001
     * Offset: 0
     */
    int32_t fr_feedback_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t fr_magnetizing_current;
};

/**
 * Signals in message FR_AMK_Actual_2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fr_amk_actual_2_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fr_temp_motor;

    /**
     * Range: -327680..327670 (-32768..32767 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fr_temp_inverter;

    /**
     * Range: -3277..3277 (-3276.8..3276.7 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fr_error_info;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fr_temp_igbt;
};

/**
 * Signals in message FR_AMK_RITSet1.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fr_amk_rit_set1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fr_errorlist1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fr_errorlist2;
};

/**
 * Signals in message FR_AMK_RITSet2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fr_amk_rit_set2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fr_errorlist3;

    /**
     * Range: 0..4096 (0..4096 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fr_dc_bus_voltage;

    /**
     * Range: 0..40960 (0..4096 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fr_dc_bus_voltage_monitoring;
};

/**
 * Signals in message FR_AMK_Setpoints.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fr_amk_setpoints_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_amk_b_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_amk_b_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_amk_b_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_amk_b_error_reset;

    /**
     * Range: -10000..10000 (-1000..1000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fr_amk_torque_setpoint;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fr_amk_torque_limit_positive;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fr_amk_torque_limit_negative;
};

/**
 * Signals in message FR_AMK_Setpoints2.
 *
 * All signal values are as on the CAN bus.
 */
struct inverter_dbc_fr_amk_setpoints2_t {
    /**
     * Range: -1000..1000 (-1000..1000 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t fr_actual_speed;
};

/**
 * Pack message RL_AMK_Actual_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rl_amk_actual_1_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rl_amk_actual_1_t *src_p,
    size_t size);

/**
 * Unpack message RL_AMK_Actual_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rl_amk_actual_1_unpack(
    struct inverter_dbc_rl_amk_actual_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RL_AMK_Actual_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rl_amk_actual_1_init(struct inverter_dbc_rl_amk_actual_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_actual_1_rl_status_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_status_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_status_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_actual_1_rl_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_actual_1_rl_status_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_status_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_status_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_actual_1_rl_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_actual_1_rl_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_actual_1_rl_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_actual_1_rl_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_actual_1_rl_status_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_status_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_status_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t inverter_dbc_rl_amk_actual_1_rl_feedback_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_feedback_velocity_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_feedback_velocity_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rl_amk_actual_1_rl_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_1_rl_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_1_rl_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message RL_AMK_Actual_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rl_amk_actual_2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rl_amk_actual_2_t *src_p,
    size_t size);

/**
 * Unpack message RL_AMK_Actual_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rl_amk_actual_2_unpack(
    struct inverter_dbc_rl_amk_actual_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RL_AMK_Actual_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rl_amk_actual_2_init(struct inverter_dbc_rl_amk_actual_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rl_amk_actual_2_rl_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_2_rl_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_2_rl_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rl_amk_actual_2_rl_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_2_rl_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_2_rl_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_rl_amk_actual_2_rl_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_2_rl_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_2_rl_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rl_amk_actual_2_rl_temp_igbt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_actual_2_rl_temp_igbt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_actual_2_rl_temp_igbt_is_in_range(int16_t value);

/**
 * Pack message RL_AMK_RITSet1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rl_amk_rit_set1_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rl_amk_rit_set1_t *src_p,
    size_t size);

/**
 * Unpack message RL_AMK_RITSet1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rl_amk_rit_set1_unpack(
    struct inverter_dbc_rl_amk_rit_set1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RL_AMK_RITSet1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rl_amk_rit_set1_init(struct inverter_dbc_rl_amk_rit_set1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_rl_amk_rit_set1_rl_erro_r_list1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_rit_set1_rl_erro_r_list1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_rit_set1_rl_erro_r_list1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_rl_amk_rit_set1_rl_erro_r_list2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_rit_set1_rl_erro_r_list2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_rit_set1_rl_erro_r_list2_is_in_range(uint32_t value);

/**
 * Pack message RL_AMK_RITSet2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rl_amk_rit_set2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rl_amk_rit_set2_t *src_p,
    size_t size);

/**
 * Unpack message RL_AMK_RITSet2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rl_amk_rit_set2_unpack(
    struct inverter_dbc_rl_amk_rit_set2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RL_AMK_RITSet2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rl_amk_rit_set2_init(struct inverter_dbc_rl_amk_rit_set2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_rl_amk_rit_set2_rl_error_list3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_rit_set2_rl_error_list3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_rit_set2_rl_error_list3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_rl_amk_rit_set2_rl_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_rit_set2_rl_dc_bus_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_rit_set2_rl_dc_bus_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_rl_amk_rit_set2_rl_dc_bus_voltage_monitoring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_rit_set2_rl_dc_bus_voltage_monitoring_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_rit_set2_rl_dc_bus_voltage_monitoring_is_in_range(uint16_t value);

/**
 * Pack message RL_AMK_Setpoints.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rl_amk_setpoints_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rl_amk_setpoints_t *src_p,
    size_t size);

/**
 * Unpack message RL_AMK_Setpoints.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rl_amk_setpoints_unpack(
    struct inverter_dbc_rl_amk_setpoints_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RL_AMK_Setpoints.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rl_amk_setpoints_init(struct inverter_dbc_rl_amk_setpoints_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_setpoints_rl_amk_b_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_setpoints_rl_amk_b_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_setpoints_rl_amk_b_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_setpoints_rl_amk_b_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_setpoints_rl_amk_b_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_setpoints_rl_amk_b_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_setpoints_rl_amk_b_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_setpoints_rl_amk_b_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_setpoints_rl_amk_b_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rl_amk_setpoints_rl_amk_b_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_setpoints_rl_amk_b_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_setpoints_rl_amk_b_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rl_amk_setpoints_rl_amk_torque_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_setpoints_rl_amk_torque_setpoint_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_setpoints_rl_amk_torque_setpoint_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rl_amk_setpoints_rl_amk_torque_limit_positive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_setpoints_rl_amk_torque_limit_positive_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_setpoints_rl_amk_torque_limit_positive_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rl_amk_setpoints_rl_amk_torque_limit_negative_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_setpoints_rl_amk_torque_limit_negative_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_setpoints_rl_amk_torque_limit_negative_is_in_range(int16_t value);

/**
 * Pack message RL_AMK_Setpoints2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rl_amk_setpoints2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rl_amk_setpoints2_t *src_p,
    size_t size);

/**
 * Unpack message RL_AMK_Setpoints2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rl_amk_setpoints2_unpack(
    struct inverter_dbc_rl_amk_setpoints2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RL_AMK_Setpoints2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rl_amk_setpoints2_init(struct inverter_dbc_rl_amk_setpoints2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rl_amk_setpoints2_rl_actual_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rl_amk_setpoints2_rl_actual_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rl_amk_setpoints2_rl_actual_speed_is_in_range(int16_t value);

/**
 * Pack message RR_AMK_Actual_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rr_amk_actual_1_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rr_amk_actual_1_t *src_p,
    size_t size);

/**
 * Unpack message RR_AMK_Actual_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rr_amk_actual_1_unpack(
    struct inverter_dbc_rr_amk_actual_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_AMK_Actual_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rr_amk_actual_1_init(struct inverter_dbc_rr_amk_actual_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_actual_1_rr_status_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_status_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_status_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_actual_1_rr_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_actual_1_rr_status_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_status_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_status_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_actual_1_rr_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_actual_1_rr_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_actual_1_rr_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_actual_1_rr_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_actual_1_rr_status_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_status_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_status_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t inverter_dbc_rr_amk_actual_1_rr_feedback_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_feedback_velocity_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_feedback_velocity_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rr_amk_actual_1_rr_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_1_rr_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_1_rr_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message RR_AMK_Actual_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rr_amk_actual_2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rr_amk_actual_2_t *src_p,
    size_t size);

/**
 * Unpack message RR_AMK_Actual_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rr_amk_actual_2_unpack(
    struct inverter_dbc_rr_amk_actual_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_AMK_Actual_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rr_amk_actual_2_init(struct inverter_dbc_rr_amk_actual_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rr_amk_actual_2_rr_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_2_rr_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_2_rr_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rr_amk_actual_2_rr_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_2_rr_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_2_rr_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_rr_amk_actual_2_rr_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_2_rr_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_2_rr_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rr_amk_actual_2_rr_temp_igbt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_actual_2_rr_temp_igbt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_actual_2_rr_temp_igbt_is_in_range(int16_t value);

/**
 * Pack message RR_AMK_RITSet1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rr_amk_rit_set1_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rr_amk_rit_set1_t *src_p,
    size_t size);

/**
 * Unpack message RR_AMK_RITSet1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rr_amk_rit_set1_unpack(
    struct inverter_dbc_rr_amk_rit_set1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_AMK_RITSet1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rr_amk_rit_set1_init(struct inverter_dbc_rr_amk_rit_set1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_rr_amk_rit_set1_rr_errorlist1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_rit_set1_rr_errorlist1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_rit_set1_rr_errorlist1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_rr_amk_rit_set1_rr_errorlist2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_rit_set1_rr_errorlist2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_rit_set1_rr_errorlist2_is_in_range(uint32_t value);

/**
 * Pack message RR_AMK_RITSet2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rr_amk_rit_set2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rr_amk_rit_set2_t *src_p,
    size_t size);

/**
 * Unpack message RR_AMK_RITSet2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rr_amk_rit_set2_unpack(
    struct inverter_dbc_rr_amk_rit_set2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_AMK_RITSet2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rr_amk_rit_set2_init(struct inverter_dbc_rr_amk_rit_set2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_rr_amk_rit_set2_rr_errorlist3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_rit_set2_rr_errorlist3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_rit_set2_rr_errorlist3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_rr_amk_rit_set2_rr_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_rit_set2_rr_dc_bus_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_rit_set2_rr_dc_bus_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_rr_amk_rit_set2_rr_dc_bus_voltage_monitoring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_rit_set2_rr_dc_bus_voltage_monitoring_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_rit_set2_rr_dc_bus_voltage_monitoring_is_in_range(uint16_t value);

/**
 * Pack message RR_AMK_Setpoints.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rr_amk_setpoints_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rr_amk_setpoints_t *src_p,
    size_t size);

/**
 * Unpack message RR_AMK_Setpoints.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rr_amk_setpoints_unpack(
    struct inverter_dbc_rr_amk_setpoints_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_AMK_Setpoints.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rr_amk_setpoints_init(struct inverter_dbc_rr_amk_setpoints_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_setpoints_rr_amk_b_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_setpoints_rr_amk_b_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_setpoints_rr_amk_b_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_setpoints_rr_amk_b_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_setpoints_rr_amk_b_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_setpoints_rr_amk_b_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_setpoints_rr_amk_b_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_setpoints_rr_amk_b_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_setpoints_rr_amk_b_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_rr_amk_setpoints_rr_amk_b_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_setpoints_rr_amk_b_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_setpoints_rr_amk_b_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rr_amk_setpoints_rr_amk_torque_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_setpoints_rr_amk_torque_setpoint_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_setpoints_rr_amk_torque_setpoint_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rr_amk_setpoints_rr_amk_torque_limit_positive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_setpoints_rr_amk_torque_limit_positive_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_setpoints_rr_amk_torque_limit_positive_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rr_amk_setpoints_rr_amk_torque_limit_negative_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_setpoints_rr_amk_torque_limit_negative_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_setpoints_rr_amk_torque_limit_negative_is_in_range(int16_t value);

/**
 * Pack message RR_AMK_Setpoints2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_rr_amk_setpoints2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_rr_amk_setpoints2_t *src_p,
    size_t size);

/**
 * Unpack message RR_AMK_Setpoints2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_rr_amk_setpoints2_unpack(
    struct inverter_dbc_rr_amk_setpoints2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_AMK_Setpoints2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_rr_amk_setpoints2_init(struct inverter_dbc_rr_amk_setpoints2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_rr_amk_setpoints2_rr_actual_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_rr_amk_setpoints2_rr_actual_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_rr_amk_setpoints2_rr_actual_speed_is_in_range(int16_t value);

/**
 * Pack message FL_AMK_Actual_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fl_amk_actual_1_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fl_amk_actual_1_t *src_p,
    size_t size);

/**
 * Unpack message FL_AMK_Actual_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fl_amk_actual_1_unpack(
    struct inverter_dbc_fl_amk_actual_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FL_AMK_Actual_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fl_amk_actual_1_init(struct inverter_dbc_fl_amk_actual_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_actual_1_fl_status_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_status_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_status_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_actual_1_fl_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_actual_1_fl_status_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_status_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_status_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_actual_1_fl_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_actual_1_fl_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_actual_1_fl_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_actual_1_fl_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_actual_1_fl_status_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_status_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_status_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t inverter_dbc_fl_amk_actual_1_fl_feedback_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_feedback_velocity_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_feedback_velocity_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fl_amk_actual_1_fl_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_1_fl_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_1_fl_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message FL_AMK_Actual_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fl_amk_actual_2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fl_amk_actual_2_t *src_p,
    size_t size);

/**
 * Unpack message FL_AMK_Actual_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fl_amk_actual_2_unpack(
    struct inverter_dbc_fl_amk_actual_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FL_AMK_Actual_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fl_amk_actual_2_init(struct inverter_dbc_fl_amk_actual_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fl_amk_actual_2_fl_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_2_fl_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_2_fl_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fl_amk_actual_2_fl_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_2_fl_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_2_fl_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_fl_amk_actual_2_fl_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_2_fl_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_2_fl_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fl_amk_actual_2_fl_temp_igbt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_actual_2_fl_temp_igbt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_actual_2_fl_temp_igbt_is_in_range(int16_t value);

/**
 * Pack message FL_AMK_RITSet1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fl_amk_rit_set1_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fl_amk_rit_set1_t *src_p,
    size_t size);

/**
 * Unpack message FL_AMK_RITSet1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fl_amk_rit_set1_unpack(
    struct inverter_dbc_fl_amk_rit_set1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FL_AMK_RITSet1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fl_amk_rit_set1_init(struct inverter_dbc_fl_amk_rit_set1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_fl_amk_rit_set1_fl_errorlist1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_rit_set1_fl_errorlist1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_rit_set1_fl_errorlist1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_fl_amk_rit_set1_fl_errorlist2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_rit_set1_fl_errorlist2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_rit_set1_fl_errorlist2_is_in_range(uint32_t value);

/**
 * Pack message FL_AMK_RITSet2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fl_amk_rit_set2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fl_amk_rit_set2_t *src_p,
    size_t size);

/**
 * Unpack message FL_AMK_RITSet2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fl_amk_rit_set2_unpack(
    struct inverter_dbc_fl_amk_rit_set2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FL_AMK_RITSet2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fl_amk_rit_set2_init(struct inverter_dbc_fl_amk_rit_set2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_fl_amk_rit_set2_fl_error_list3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_rit_set2_fl_error_list3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_rit_set2_fl_error_list3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_fl_amk_rit_set2_fl_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_rit_set2_fl_dc_bus_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_rit_set2_fl_dc_bus_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_fl_amk_rit_set2_fl_dc_bus_voltage_monitoring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_rit_set2_fl_dc_bus_voltage_monitoring_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_rit_set2_fl_dc_bus_voltage_monitoring_is_in_range(uint16_t value);

/**
 * Pack message FL_AMK_Setpoints.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fl_amk_setpoints_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fl_amk_setpoints_t *src_p,
    size_t size);

/**
 * Unpack message FL_AMK_Setpoints.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fl_amk_setpoints_unpack(
    struct inverter_dbc_fl_amk_setpoints_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FL_AMK_Setpoints.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fl_amk_setpoints_init(struct inverter_dbc_fl_amk_setpoints_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_setpoints_fl_amk_b_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_setpoints_fl_amk_b_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_setpoints_fl_amk_b_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_setpoints_fl_amk_b_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_setpoints_fl_amk_b_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_setpoints_fl_amk_b_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_setpoints_fl_amk_b_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_setpoints_fl_amk_b_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_setpoints_fl_amk_b_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fl_amk_setpoints_fl_amk_b_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_setpoints_fl_amk_b_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_setpoints_fl_amk_b_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fl_amk_setpoints_fl_amk_torque_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_setpoints_fl_amk_torque_setpoint_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_setpoints_fl_amk_torque_setpoint_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fl_amk_setpoints_fl_amk_torque_limit_positive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_setpoints_fl_amk_torque_limit_positive_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_setpoints_fl_amk_torque_limit_positive_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fl_amk_setpoints_fl_amk_torque_limit_negative_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_setpoints_fl_amk_torque_limit_negative_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_setpoints_fl_amk_torque_limit_negative_is_in_range(int16_t value);

/**
 * Pack message FL_AMK_Setpoints2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fl_amk_setpoints2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fl_amk_setpoints2_t *src_p,
    size_t size);

/**
 * Unpack message FL_AMK_Setpoints2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fl_amk_setpoints2_unpack(
    struct inverter_dbc_fl_amk_setpoints2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FL_AMK_Setpoints2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fl_amk_setpoints2_init(struct inverter_dbc_fl_amk_setpoints2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fl_amk_setpoints2_fl_actual_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fl_amk_setpoints2_fl_actual_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fl_amk_setpoints2_fl_actual_speed_is_in_range(int16_t value);

/**
 * Pack message FR_AMK_Actual_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fr_amk_actual_1_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fr_amk_actual_1_t *src_p,
    size_t size);

/**
 * Unpack message FR_AMK_Actual_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fr_amk_actual_1_unpack(
    struct inverter_dbc_fr_amk_actual_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FR_AMK_Actual_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fr_amk_actual_1_init(struct inverter_dbc_fr_amk_actual_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_actual_1_fr_status_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_status_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_status_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_actual_1_fr_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_actual_1_fr_status_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_status_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_status_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_actual_1_fr_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_actual_1_fr_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_actual_1_fr_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_actual_1_fr_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_actual_1_fr_status_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_status_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_status_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t inverter_dbc_fr_amk_actual_1_fr_feedback_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_feedback_velocity_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_feedback_velocity_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fr_amk_actual_1_fr_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_1_fr_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_1_fr_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message FR_AMK_Actual_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fr_amk_actual_2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fr_amk_actual_2_t *src_p,
    size_t size);

/**
 * Unpack message FR_AMK_Actual_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fr_amk_actual_2_unpack(
    struct inverter_dbc_fr_amk_actual_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FR_AMK_Actual_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fr_amk_actual_2_init(struct inverter_dbc_fr_amk_actual_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fr_amk_actual_2_fr_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_2_fr_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_2_fr_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fr_amk_actual_2_fr_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_2_fr_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_2_fr_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_fr_amk_actual_2_fr_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_2_fr_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_2_fr_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fr_amk_actual_2_fr_temp_igbt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_actual_2_fr_temp_igbt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_actual_2_fr_temp_igbt_is_in_range(int16_t value);

/**
 * Pack message FR_AMK_RITSet1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fr_amk_rit_set1_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fr_amk_rit_set1_t *src_p,
    size_t size);

/**
 * Unpack message FR_AMK_RITSet1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fr_amk_rit_set1_unpack(
    struct inverter_dbc_fr_amk_rit_set1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FR_AMK_RITSet1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fr_amk_rit_set1_init(struct inverter_dbc_fr_amk_rit_set1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_fr_amk_rit_set1_fr_errorlist1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_rit_set1_fr_errorlist1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_rit_set1_fr_errorlist1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_fr_amk_rit_set1_fr_errorlist2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_rit_set1_fr_errorlist2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_rit_set1_fr_errorlist2_is_in_range(uint32_t value);

/**
 * Pack message FR_AMK_RITSet2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fr_amk_rit_set2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fr_amk_rit_set2_t *src_p,
    size_t size);

/**
 * Unpack message FR_AMK_RITSet2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fr_amk_rit_set2_unpack(
    struct inverter_dbc_fr_amk_rit_set2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FR_AMK_RITSet2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fr_amk_rit_set2_init(struct inverter_dbc_fr_amk_rit_set2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t inverter_dbc_fr_amk_rit_set2_fr_errorlist3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_rit_set2_fr_errorlist3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_rit_set2_fr_errorlist3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_fr_amk_rit_set2_fr_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_rit_set2_fr_dc_bus_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_rit_set2_fr_dc_bus_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverter_dbc_fr_amk_rit_set2_fr_dc_bus_voltage_monitoring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_rit_set2_fr_dc_bus_voltage_monitoring_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_rit_set2_fr_dc_bus_voltage_monitoring_is_in_range(uint16_t value);

/**
 * Pack message FR_AMK_Setpoints.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fr_amk_setpoints_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fr_amk_setpoints_t *src_p,
    size_t size);

/**
 * Unpack message FR_AMK_Setpoints.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fr_amk_setpoints_unpack(
    struct inverter_dbc_fr_amk_setpoints_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FR_AMK_Setpoints.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fr_amk_setpoints_init(struct inverter_dbc_fr_amk_setpoints_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_setpoints_fr_amk_b_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_setpoints_fr_amk_b_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_setpoints_fr_amk_b_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_setpoints_fr_amk_b_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_setpoints_fr_amk_b_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_setpoints_fr_amk_b_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_setpoints_fr_amk_b_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_setpoints_fr_amk_b_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_setpoints_fr_amk_b_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverter_dbc_fr_amk_setpoints_fr_amk_b_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_setpoints_fr_amk_b_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_setpoints_fr_amk_b_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fr_amk_setpoints_fr_amk_torque_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_setpoints_fr_amk_torque_setpoint_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_setpoints_fr_amk_torque_setpoint_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fr_amk_setpoints_fr_amk_torque_limit_positive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_setpoints_fr_amk_torque_limit_positive_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_setpoints_fr_amk_torque_limit_positive_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fr_amk_setpoints_fr_amk_torque_limit_negative_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_setpoints_fr_amk_torque_limit_negative_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_setpoints_fr_amk_torque_limit_negative_is_in_range(int16_t value);

/**
 * Pack message FR_AMK_Setpoints2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverter_dbc_fr_amk_setpoints2_pack(
    uint8_t *dst_p,
    const struct inverter_dbc_fr_amk_setpoints2_t *src_p,
    size_t size);

/**
 * Unpack message FR_AMK_Setpoints2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverter_dbc_fr_amk_setpoints2_unpack(
    struct inverter_dbc_fr_amk_setpoints2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FR_AMK_Setpoints2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int inverter_dbc_fr_amk_setpoints2_init(struct inverter_dbc_fr_amk_setpoints2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverter_dbc_fr_amk_setpoints2_fr_actual_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double inverter_dbc_fr_amk_setpoints2_fr_actual_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverter_dbc_fr_amk_setpoints2_fr_actual_speed_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
